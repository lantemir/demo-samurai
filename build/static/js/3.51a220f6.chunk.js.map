{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","createRef","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Component","ProfileStatusWithHooks","useState","editMode","seteditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","descriptionBlock","photos","large","Preloader","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.51a220f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2t9Ni\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3g_FI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__fPe8k\",\"posts\":\"MyPosts_posts__WPb7O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__29pAT\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n  \r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://www.kinonews.ru/insimgs/2019/newsimg/newsimg87089.jpg'></img>\r\n                    {props.message}\r\n            <div>\r\n                <span>like {props.likesCount}</span>      \r\n            </div>        \r\n                  \r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Post","import React, { PureComponent } from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n//import {addPostActionCreator,updateNewPostTextActionCreator} from '../../../redux/profile-reducer';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport {required, maxLengthCreator} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FomsControls';\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\n\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return nextProps != this.props || nextState != this.state; // что бы не отрисовывать копоненту лишний раз это же за нас дедает PureComponent для классовой компоненты\r\n    // }    \r\n\r\n    let postsElements = \r\n        [...props.posts] // интьютабельность делает копию массива и не меняет в бизнесе state 88 урок 22 минута pure function\r\n            .reverse()\r\n            .map(p => <Post message={p.message} likesCount={p.likesCount} id={p.id}/>)\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {      \r\n        props.addPost(values.newPostText);       \r\n    }\r\n   \r\n    return (\r\n        \r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            \r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n\r\n                {postsElements}\r\n\r\n                {/* <Post message= {posts[0].message} likesCount={posts[0].likesCount} id={posts[0].id} />  \r\n                <Post message= {posts[1].message} likesCount={posts[1].likesCount} id={posts[1].id} />                */}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n    \r\n});\r\n\r\n\r\n// моя работа \r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field  name=\"newPostText\" component={Textarea} placeholder={\"Post message\"} \r\n                        validate ={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    ) \r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {addPostActionCreator,updateNewPostTextActionCreator, addPostAC} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n// import StoreContext from './../../../StoreContext';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n\r\n//     //let state = props.store.getState();\r\n\r\n//     return (\r\n//         <StoreContext.Consumer> \r\n//             {\r\n//             (store) => {\r\n//                 let state = store.getState(); // ошибка?\r\n//                 let addPost = () => {            \r\n//                     store.dispatch(addPostActionCreator());              \r\n//                 }\r\n            \r\n//                 let onPostChange = (text) => { \r\n//                     let action = updateNewPostTextActionCreator(text);\r\n//                     store.dispatch(action); // запускает profileReducer я думаю\r\n//                 }\r\n\r\n//                 return <MyPosts updateNewPostText={onPostChange} \r\n//                           addPost = {addPost}    \r\n//                           posts={state.profilePage.posts}    \r\n//                           newPostText={state.profilePage.newPostText}/> }\r\n//             }\r\n//        </StoreContext.Consumer>\r\n//     )\r\n// };\r\n\r\nconst mapStateToProps = (state) => {\r\n    \r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    \r\n    return {\r\n        \r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText)); \r\n        }\r\n\r\n        // // моя работа\r\n        // addPostDis: (profilePost) => {\r\n        //     dispatch(addPostAC(profilePost));\r\n        // }\r\n\r\n        \r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\n\r\nclass ProfileStatus extends React.Component  {\r\n\r\n\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = ()=>  {\r\n        this.setState({\r\n            editMode: true\r\n        });     \r\n    }\r\n    \r\n    deactivateEditMode = () =>  {\r\n        this.setState({\r\n            editMode: false\r\n        });     \r\n        this.props.updateStatus(this.state.status);  \r\n    }\r\n\r\n    onStatusChange =  (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        }) ;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {  //меняется когда локальный state меняется или props\r\n\r\n        if(prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n        console.log(\"componentDidUpdate\");\r\n    }\r\n    \r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}><div>{this.props.status || \"----\" }</div></span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode} value={this.state.status}></input>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus","import React, {useState, useEffect}from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    // let stateWithSetState = useState(true); // это обяснение нижней строчки\r\n    // let editMode = stateWithSetState[0];\r\n    // let seteditMode = stateWithSetState[1];\r\n    let [editMode, seteditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => { //запускается после того как всё отрисуется и покажется на экране постоянно\r\n        setStatus(props.status);\r\n    }, [props.status]); //  привязяли к пропсу поэтому запустится один раз после отрисовки\r\n\r\n    const activateEditMode = () => {\r\n        seteditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () =>  {        \r\n        seteditMode(false);\r\n        props.updateStatus(status);  \r\n    }\r\n\r\n    const onStatusChange =  (e) => {\r\n        setStatus(e.currentTarget.value);        \r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"----\"} </span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}  autoFocus={true}  onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n\r\n    if(!profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n\r\n    <div>      \r\n        <div className={s.descriptionBlock}>\r\n            <img src={profile.photos.large}/>\r\n            <ProfileStatusWithHooks  status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    </div>    \r\n\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport s from './Profile.module.css';\r\n// import MyPosts from './MyPosts/MyPosts';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <ProfileInfo profile = {props.profile} status= {props.status} updateStatus={props.updateStatus}/>        \r\n             <MyPostsContainer /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {getUserProfile, getStatus,updateStatus } from './../../redux/profile-reducer';\r\nimport * as axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport {withAuthRedirect} from './../../hoc/withAuthRedirect'\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component { \r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId){\r\n            userId = this.props.authorizedUserId;\r\n            if(!userId){\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n                 \r\n        return (            \r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />            \r\n        )\r\n    }\r\n} // 1слой выполняется потом\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile, // отправит в profInfo state \r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId, //ветки смотреть комбайнер редсер\r\n    isAuth: state.auth.isAuth    \r\n});\r\n\r\n\r\nexport default compose(connect(mapStateToProps,{getUserProfile ,getStatus , updateStatus}),\r\n                                       withRouter\r\n                                      // withAuthRedirect\r\n                                       )(ProfileContainer); \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// let mapStateToProps = (state) => ({\r\n//     a: 13\r\n// }) // возврат объекта\r\n\r\n// let mapStateToProps = (state) => {\r\n//     тело функции\r\n// } //  тело функции"],"sourceRoot":""}