{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","values","sendMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sFCanKC,EAVI,SAACC,GAChB,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,IAAKN,EAAMO,QCQzCC,EATC,SAACR,GACb,OACI,yBAAKC,UAAWC,IAAEC,QACbH,EAAMS,U,0CCKbC,EAAeC,YAAiB,IAoDhCC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAdL,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACVC,SAAU,CAACC,IAAUX,GAAcH,KAAK,iBAAiBe,YAAY,uBAEjF,6BACI,6CAQDC,EAnDC,SAACvB,GAEb,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAK,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMuB,IAAKD,EAAEvB,GAAIA,GAAIuB,EAAEvB,QACtFyB,EAAmBP,EAAMQ,SAASJ,KAAK,SAACK,GAAD,OAAQ,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAKG,EAAE3B,GAAIA,GAAI2B,EAAE3B,QAC5EkB,EAAMU,eAU3B,OAAIlC,EAAMmC,OAGN,yBAAKlC,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAEkC,cACbV,GAGL,yBAAKzB,UAAWC,IAAE8B,UACd,iCAAOD,EAAP,MAGJ,kBAACnB,EAAD,CAAqBG,SAhBT,SAACsB,GACjBrC,EAAMsC,YAAYD,EAAOH,oBAGJ,kBAAC,IAAD,CAAU7B,GAAI,Y,gCCuB5BkC,sBACXC,aAnBkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAKF,SAACgB,GACtB,MAAO,CACHH,YAAa,SAACJ,GACVO,EAASC,YAAmBR,SAUpCS,IAFWJ,CAGbhB","file":"static/js/4.851aae7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__AbsHu\",\"dialogsItems\":\"Dialogs_dialogsItems__2z_78\",\"active\":\"Dialogs_active__2DtRD\",\"messages\":\"Dialogs_messages__10pjA\",\"message\":\"Dialogs_message__3si5Q\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <div className={s.dialog}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\n\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\n\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport {Textarea} from './../../components/common/FormsControls/FomsControls';\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators';\r\n\r\n\r\n\r\nconst maxLength50 =  maxLengthCreator(50)\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d =>  <DialogItem name={d.name} key={d.id} id={d.id} />);   \r\n    let messagesElements = state.messages.map( (m) =>  <Message message={m.message} key={m.id} id={m.id}/> );\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n   \r\n\r\n   \r\n\r\n    let addNewMessage = (values) => {        \r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if(!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div> {messagesElements} </div>       \r\n                \r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst AddMessageForm = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                        validate={[required, maxLength50]} name=\"newMessageBody\" placeholder=\"Enter you message\"/>                \r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>     \r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\n\r\nimport Dialogs from './Dialogs';\r\n\r\nimport {sendMessageCreator} from '../../redux/dialogs-reducer';\r\n//import StoreContext from './../../StoreContext';\r\nimport { connect } from 'react-redux';\r\nimport {withAuthRedirect} from './../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n\r\n\r\n// const DialogsContainer = () => {\r\n\r\n    \r\n//     return <StoreContext.Consumer> \r\n//             {   (store) => {                     \r\n\r\n//                     let OnSendMessageClick = () => {\r\n//                         store.dispatch(sendMessageCreator());\r\n//                     }\r\n\r\n//                     let onNewMessageChange = (body) => {\r\n//                         store.dispatch(updateBodyOfNewMessageBodyCreator(body));\r\n//                     }  \r\n\r\n\r\n//                     return <Dialogs updateNewMessageBody = {onNewMessageChange} \r\n//                                     sendMessage ={OnSendMessageClick} \r\n//                                     dialogsPage={store.getState().dialogsPage} />\r\n//                 }       \r\n//             }\r\n//            </StoreContext.Consumer>    \r\n    \r\n// }        \r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        \r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {    \r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }    \r\n       \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs) "],"sourceRoot":""}